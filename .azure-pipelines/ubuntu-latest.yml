trigger:
- master

jobs:
- job: build
  displayName: "Build"
  strategy:
    maxParallel: 4
    matrix:
      gcc_gtk3_lua52:
        publish_prefix: gcc-gtk3-lua52
        lua_package: liblua5.2-dev
        lua_type: patched-C++
        compiler: g++
        CC: gcc
        CXX: g++
      gcc_gtk3_lua53:
        publish_prefix: gcc-gtk3-lua53
        lua_package: liblua5.3-dev
        lua_type: patched-C++
        compiler: g++
        CC: gcc
        CXX: g++
      gcc_gtk3_lua54:
        publish_prefix: gcc-gtk3-lua54
        lua_package: liblua5.4-dev
        lua_type: C++
        compiler: g++
        CC: gcc
        CXX: g++
      clang_gtk3_lua52:
        publish_prefix: clang-gtk3-lua52
        lua_package: liblua5.2-dev
        lua_type: patched-C++
        compiler: clang
        CC: clang
        CXX: clang++
      clang_gtk3_lua53:
        publish_prefix: clang-gtk3-lua53
        lua_package: liblua5.3-dev
        lua_type: patched-C++
        compiler: clang
        CC: clang
        CXX: clang++
      clang_gtk3_lua54:
        publish_prefix: clang-gtk3-lua54
        lua_package: liblua5.4-dev
        lua_type: C++
        compiler: clang
        CC: clang
        CXX: clang++
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: >
      sudo apt-get update && sudo apt-get install
      $(compiler) $(lua_package) git ragel gettext libgtk-3-dev libexpat1-dev
      libboost-test-dev
  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/ -DLUA_TYPE=$(lua_type) ..'
  - script: |
      cmake --build . --config Release
    workingDirectory: 'build'
  - script: |
      ./build/tests --log_format=JUNIT --report_format=HRF -k tests-log.xml -e tests-report.txt --no_result_code
    workingDirectory: ''
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'tests-*.xml'
  - script: |
      cmake --build . --config Release --target install
    workingDirectory: 'build'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: $(publish_prefix)-ubuntu-latest
      targetPath: $(Build.ArtifactStagingDirectory)
  - script: |
      cmake --build . --config Release --target template
      version=`git describe --match="gpick-*" --match="v*" --always --long`
      echo "##vso[task.setvariable variable=version]$version"
    workingDirectory: 'build'
  - task: cURLUploader@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      files: $(System.DefaultWorkingDirectory)/build/template.pot
      authType: 'userAndPass'
      username: 'gpick'
      password: $(GPICK_API_KEY)
      url: 'https://www.gpick.org/api/pushTranslation/$(version)'
      remotePath: ''

